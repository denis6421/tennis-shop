{"ast":null,"code":"import { SET_DATA_TO_CART_REDUCER, ADD_CART_PRODUCTS, REMOVE_PRODUCT_FROM_CART, UPDATE_PRODUCT_IN_CART } from './types';\nimport { setCookie } from '../tools/cookie';\nexport const setDataToCartReducer = (name, value) => async dispatch => {\n  dispatch({\n    type: SET_DATA_TO_CART_REDUCER,\n    payload: {\n      name,\n      value\n    }\n  });\n};\nexport const addCartProducts = (product, cart_list, increment_amount) => async dispatch => {\n  let new_list = JSON.parse(JSON.stringify(cart_list));\n  let new_id = \"\".concat(product.id, \"_\").concat(product.selected_size); //create product cart id\n\n  product['cart_id'] = product.size ? new_id : product.id;\n  let includes = cart_list.filter(m => m.cart_id === product.cart_id)[0]; //if product not in cart\n\n  if (!includes) {\n    let amount = product.amount ? product.amount : 1;\n\n    if (increment_amount) {\n      amount = increment_amount;\n    }\n\n    product['amount'] = amount;\n    product['total'] = amount * product.price;\n    new_list = [...new_list, product];\n  } //if product already in cart\n  else {\n      let existing_product = cart_list.filter(m => m.cart_id === product.cart_id)[0];\n      let amount = existing_product.amount;\n\n      if (increment_amount) {\n        amount = existing_product.amount + increment_amount;\n      } else {\n        amount++;\n      }\n\n      product['amount'] = amount;\n      product['total'] = amount * product.price;\n      let index = new_list.findIndex(m => m.cart_id === product.cart_id);\n      new_list.splice(index, 1, product);\n    }\n\n  setCookie('shopping-cart', JSON.stringify(new_list));\n  dispatch({\n    type: ADD_CART_PRODUCTS,\n    payload: new_list\n  });\n};\nexport const removeFromCart = (product, cart_list) => async dispatch => {\n  let new_list = JSON.parse(JSON.stringify(cart_list));\n  new_list = new_list.filter(m => m.cart_id !== product.cart_id);\n  setCookie('shopping-cart', JSON.stringify(new_list));\n  dispatch({\n    type: REMOVE_PRODUCT_FROM_CART,\n    payload: new_list\n  });\n};\nexport const updateProductInCart = (product, cart_list) => async dispatch => {\n  let new_list = JSON.parse(JSON.stringify(cart_list));\n  product.total = product.amount * product.price;\n  let index = new_list.findIndex(m => m.cart_id === product.cart_id);\n  new_list.splice(index, 1, product);\n  setCookie('shopping-cart', JSON.stringify(new_list));\n  dispatch({\n    type: UPDATE_PRODUCT_IN_CART,\n    payload: new_list\n  });\n};","map":{"version":3,"sources":["/Users/denis/Desktop/projects/tennis-shop/client/src/actions/cart_actions.js"],"names":["SET_DATA_TO_CART_REDUCER","ADD_CART_PRODUCTS","REMOVE_PRODUCT_FROM_CART","UPDATE_PRODUCT_IN_CART","setCookie","setDataToCartReducer","name","value","dispatch","type","payload","addCartProducts","product","cart_list","increment_amount","new_list","JSON","parse","stringify","new_id","id","selected_size","size","includes","filter","m","cart_id","amount","price","existing_product","index","findIndex","splice","removeFromCart","updateProductInCart","total"],"mappings":"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","sourcesContent":["import {\n    SET_DATA_TO_CART_REDUCER,\n    ADD_CART_PRODUCTS,\n    REMOVE_PRODUCT_FROM_CART,\n    UPDATE_PRODUCT_IN_CART\n} from './types'\nimport { setCookie } from '../tools/cookie'\n\n\nexport const setDataToCartReducer = (name, value) => async dispatch => {\n    dispatch({\n        type: SET_DATA_TO_CART_REDUCER,\n        payload: { name, value }\n    })\n}\n\n\n\nexport const addCartProducts = (product, cart_list, increment_amount) => async dispatch => {\n    let new_list = JSON.parse(JSON.stringify(cart_list))\n    \n   \n    let new_id = `${product.id}_${product.selected_size}`\n    //create product cart id\n    product['cart_id'] = product.size ? new_id : product.id\n    let includes = cart_list.filter(m => m.cart_id === product.cart_id)[0]\n     //if product not in cart\n    if (!includes) {\n        let amount = product.amount ? product.amount : 1\n        if(increment_amount){\n            amount = increment_amount\n        }\n        product['amount'] = amount\n        product['total'] = amount * product.price\n        new_list = [...new_list, product]\n    }\n    //if product already in cart\n    else {\n        let existing_product = cart_list.filter(m => m.cart_id === product.cart_id)[0]\n        let amount = existing_product.amount\n        if(increment_amount){\n            amount = existing_product.amount + increment_amount\n        }else{\n            amount++\n        }\n        product['amount'] = amount\n        product['total'] = amount * product.price\n        let index = new_list.findIndex(m => m.cart_id === product.cart_id)\n        new_list.splice(index, 1, product)\n    }\n    setCookie('shopping-cart', JSON.stringify(new_list))\n    dispatch({\n        type: ADD_CART_PRODUCTS,\n        payload: new_list\n    })\n}\n\n\n\n\nexport const removeFromCart = (product, cart_list) => async dispatch => {\n    let new_list = JSON.parse(JSON.stringify(cart_list))\n    new_list = new_list.filter(m => m.cart_id !== product.cart_id)\n    setCookie('shopping-cart', JSON.stringify(new_list))\n\n    dispatch({\n        type: REMOVE_PRODUCT_FROM_CART,\n        payload: new_list\n    })\n}\n\n\nexport const updateProductInCart = (product, cart_list) => async dispatch => {\n    let new_list = JSON.parse(JSON.stringify(cart_list))\n    product.total = product.amount * product.price\n    let index = new_list.findIndex(m => m.cart_id === product.cart_id)\n    new_list.splice(index, 1, product)\n    setCookie('shopping-cart', JSON.stringify(new_list))\n    dispatch({\n        type: UPDATE_PRODUCT_IN_CART,\n        payload: new_list\n    })\n}\n\n\n"]},"metadata":{},"sourceType":"module"}